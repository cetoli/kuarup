							      ---------
				          Padrão de Projeto - Template Method
							      ---------
						  Tiago Cruz de França
						            ---------
						           20/03/2008
						   

Padrão de Projeto Facade

-----




-----

	<<Autor: Tiago Cruz de França>>
	
	<<Curso: Programação Orientada a Objetos 2009 - PPGI>>
	
	<<Professor: Carlo Emmanoel Tolla de Oliveira>>

  


2-Apresentação do Padrão

 [Nome] Facade
 
 [Intento] Fornece uma interface unificada para um conjunto de interfaces em um subsistema.A fachada define uma interface de nível mais alto que facilita a utilização do subsistema 


3-Descrição do Padrão

*Motivação

 [Para Pensar] Você já parou para pensar o que acontece quando faz um copiar e colar no seu computador? O que acontece por "trás dos panos"? Você simplemente quer uma cópia de algo e que fazer isso facilmente.

 Exemplo: Movendo um Peixe e utilizando um Home Theater !!!

*-----------------------------------*---------------------------------*   
| Exemplo do Peixe                  | Exemplo do Home Theater	      |
*-----------------------------------*---------------------------------*
| 1- Piscar o olho          	    | 1- Amplificador		      |
| 2- Bater as Nadadeiras	    | 2- DvdPlayer		      |
| 3- Propulcionar o corpo com o rabo| 3- CdPlayer		      |
| 4- Mover o peixe	            | 4- Projetor		      |
|				    | 5- Luz Ambiente		      |
|				    | 6- Máquina de Pipoca	      |
|		                    | 7- Tela			      |
*-----------------------------------*---------------------------------*  

4-Aplicabilidade

 Quais são as situações em que o padrão de projeto pode ser aplicado? Quais são os exemplos de projetos deficientes que o padrão pode tratar?  Como você pode reconhecer estas situações?

 Quando se deseja simplificar e unificar um inerface grande ou um conjunto complexo de interfaces.
 Para desconectar o cliente de um sistema complexo.
  
 O padrão exige que componhamos a fachada com o seu subsistema e usemos delegação para executar o trabalho.
 Uma fachada envelopa um conjunto de objetos para simplificá-los.

5-Estrutura

* Uma situação aplicável

 [Diagrama sem fachada]
 {{{./peixeSemFachada.jpg}Exemplo de um código sem fachada}}

6-Estrutura

* Uma situação aplicável - continuação
 
 [Diagrama com fachada]
 {{{./facadePeixe.jpg}Exemplo de um código com fachada}}

7-ClasseFacade


     - Define uma interface simplificada para utilização de funcionalidades de um subsistema complexo

     - Pode ser utilizada mais de uma fachada para um subsistema

     - Desconecta o cliente de um subsistema complexo

     - Sua implementação exige que componhamos a fachada com o seu subsistema e usemos delegação para executar o trabalho da fachada

     - Envelopa um conjunto de objetos para simplificá-lo

8-Conseqüências

 Como é que o padrão apoia os seus objetivos?  Quais são as soluções de     compromisso quais os resultados ao se usar o padrão? 
 Qual o aspecto da estrutura do sistema é possível variar independentemente?

   [[1]]  Simplificar a utilização de um subsistema que necessita de muitas operações para fornecer o serviço desejado

   [[2]]  Permite que os objetos do subsistema sejam acessados se o cliente desejar

   [[3]]  Permite que o subsisema varie e o cliente esteja isento de alterações

   [[4]]  Permite uma abstração maior da utilização de um subsistema 

   [[5]]  Operações abstratas (onde o comportamento varia)

9-Implementação

  Que armadilhas, dicas, técnicas você deve estar ciente ao aplicar o padrão?  Existem problemas específicos de linguagem de implementação?

   [[1]] Um ítem de implementação. Descrição da implementação


 Exemplo: Implementando o peixe com fachada

 Fragmentos de código de como implementar o padrão em Java
 
------------------------------------------------------
class Olho{
	
	public Olho(){}
	public void piscar(){
		System.out.println("Peixe piscando o olho");
	}
}

class Nadadeira{
	
	public Nadadeira(){}
	public void bater(velocidade:double){
		if (velocidade > 2)
			System.out.println("estou batendo rapidamente minha nadadeira");
		else
			System.out.println("estou batendo devagar minha nadadeira");
	}
}

class Rabo{
	
	public Rabo(){}
	public void balancar(velocidade:double){
		if (velocidade > 2)
			System.out.println("estou batendo rapidamente minha nadadeira");
		else
			System.out.println("estou batendo devagar minha nadadeira");		
	}
}

class Corpo{
	
	public Corpo(){}
	public void mover(x:int,y:int,z:int){
		System.out.println("Vou para posicao("+x+","+y+","+z+")");
	}
}

class PeixeNadandoFachada{
	
	Olho olho;
	Nadadeira nadadeira;
	Rabo rabo;
	Corpo corpo;
	
	public PeixeNadandoFachada(olho:Olho, nadadeira:Nadadeira, rabo:Rabo, corpo:Corpo){
		
		this.olho = olho;
		this.nadadeira = nadadeira;
		this.rabo = rabo;
		this.corpo = corpo;
	
	}

	public void nadar(velNadadeira:double,velRabo:double,x:int,y:int,z:int){
		
		this.olho.piscar();
		this.rabo.balancar(velRabo);
		this.corpo.mover(x,y,z);
		this.nadadeira.bater(velNadadeira);

	}

}

class ClientePeixeComFachada{

	public static void main(String[] args){

		Olho olho = new Olho();
		Nadadeira nadadeira = new Nadadeira();
		Rabo rabo = new Rabo();
		Corpo corpo = new Corpo();

		PeixeNadandoFachada fachada = new PeixeNadandoFachada(olho,nadadeira,rabo,corpo);

		fachada.nadar(2,2.1,1,1,0);

	}

}
-------------------------------------------------------

10-Diagrama geral do padrão

 
 [Fachada]
{{{fachada.jpg}}}


11-Outro Exemplo
 
*Home Theater Sem Fachada
 
 [Difícil para o Usuário]
{{{homeTheaterSemFachada.jpg}}}


12-[...]Outro Exemplo

*Home Theater Com Fachada

 [Facilitando e Consquistando o Usuário]
{{{HomeTheaterComFachada.jpg}}}


13-Desafio

*Você consegue implementar a fachada do Home Theater?

14-Usos Conhecidos e Relacionamentos

* Casos de Uso

 Exemplos do padrão encontrado em sistemas reais. Incluir, pelo menos, dois exemplos de diferentes domínios.

15-Padrões Relacionados e Referências

 Que padrões de projeto estão intimamente relacionadas com este? Quais são as diferenças importantes? Com que outros padrões este deveria ser utilizado? 
 Neste item, podemos relacionar o Template Method com o Strategy, alertando que:
 
 O padrão semelhante é o Adapter

*-----------------------------------*---------------------------------*
| Facade			    | Adapter			      |
*-----------------------------------*---------------------------------*
| Simplificar e unificar uma  	    | Quando for necessário utilizar  |
| interface ou conjunto complexo    | uma classe existente cuja       |
| de interface			    | interface não é adequada a sua  |
| 	        		    | necessidade		      |
|  				    | 				      |
| Uma fachada desconecta um cliente | Muda a interface para algo que  |
| de um subsistema		    | o cliente deseja encontrar      |
|				    |				      |
| Exige que componhamos a fachada   | A quantidade de trabalho depende|
| com o seu subsistema e usemos     | do tamanho e complexidade da    |
| delegação para executar o trabalho| interface alvo.                 | 
*-----------------------------------*---------------------------------* 


16-Conclusão

* A fachada tem como principal objetivo facilitar a vida do cliente final de um ou vários subsistemas complexos.
 [Outros padrões virão...]
"Aguardem Sensacionais Revelações"
 
17-Referências
 
 [[1]]Padrões de Projeto, Use a Cabeça, Ed. 2. O'Relly, AltaBooks. (Head First - 2 Rev. 2009)
  
 [[2]]Steven John Metsker, Padrões de Projeto em Jav, BookMan 2004.


